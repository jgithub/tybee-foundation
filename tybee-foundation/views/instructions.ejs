<%- include('partials/header', {title: title}) %>

<body>
    <h1>
        Instructions
    </h1>
    <div>
        <button class="btn btn-primary" onclick="toggleTestSpeakerVolume()" id="toggleTestSpeakerVolume">Test Speaker Volume</button>
        <p>Click the button above to test your speaker volume.  You should hear a sound.  Adjust your speaker volume as needed.</p>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" onclick="toggleTestMicrophoneLevel()" id="toggleTestMicrophoneLevel">Test Microphone Level</button>
    
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-mic" viewBox="0 0 16 16">
            <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5"/>
            <path d="M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3"/>
        </svg>
        
        <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar" id="averageMicLevel" style="width: 0%"></div>
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" onclick="window.location.href='<%= BASE_PATH %>qa'">Speak volume and microphone levels look good.  Start the Q&A session</button>
    </div>
</body>
<script lang="javascript">
const gSpeakerTestAudio = new Audio(`<%= BASE_PATH %>audio/speaker_volume_test.mp3`);
let gToggleTestSpeakerVolume = false;
let gToggleTestMicrophoneLevel = false;

let audioContext = undefined;
let analyser = undefined;
let microphone = undefined;
let scriptProcessor = undefined;

// Request access to the microphone
navigator.mediaDevices.getUserMedia({ audio: true, video: false })
    .then(stream => {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        microphone = audioContext.createMediaStreamSource(stream);
        scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);

        analyser.smoothingTimeConstant = 0.3;
        analyser.fftSize = 1024;

        microphone.connect(analyser);
        analyser.connect(scriptProcessor);
        scriptProcessor.connect(audioContext.destination);
        
        scriptProcessor.onaudioprocess = () => {
            const array = new Uint8Array(analyser.frequencyBinCount);
            analyser.getByteFrequencyData(array);

            let values = 0;
            const length = array.length;
            for (let ii = 0; ii < length; ii++) {
                values += array[ii];
            }

            const averageMicLevel = values / length;
            // console.log('Average microphone level: ' + averageMicLevel);
            document.getElementById('averageMicLevel').style.width = (averageMicLevel * 2.5)+ '%';
        };
    })
    .catch(err => {
        console.error('The following getUserMedia error occurred: ' + err);
    });

function toggleTestMicrophoneLevel() {

}

function toggleTestSpeakerVolume() {
    const button = document.getElementById('toggleTestSpeakerVolume');  
    button.classList.toggle('btn-primary');

    if (gToggleTestSpeakerVolume) {
        // already playing.  Let's pause it
        button.classList.add('btn-primary');
        button.classList.remove('btn-warning');
        button.innerHTML = 'Continue Speaker Volume Test';
        gSpeakerTestAudio.pause();
        gSpeakerTestAudio.currentTime = 0;
        gToggleTestSpeakerVolume = false;
        return;
    } else {
        // not playing.  Let's play it
        button.classList.remove('btn-primary');
        button.classList.add('btn-warning');
        button.innerHTML = 'Stop Speaker Volume Test';
        gToggleTestSpeakerVolume = true;
        gSpeakerTestAudio.play();
    }
}
</script>
</html>