<%- include('../partials/header', {title: title}) %>

<script lang="javascript">
  let gRecordingInProgress = false;
  let mediaRecorder = undefined;
  

var gQaQuestions = <%- JSON.stringify(qaQuestions) %>;  

async function findQuestionByUuidAsync(uuid) {
  return gQaQuestions.find(question => question.uuid === uuid);
}

function getNextQuestionAsync() {
  return new Promise((resolve, reject) => {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        // document.getElementById("demo").innerHTML =
        // this.responseText;
        // alert(this.responseText)
        const jsonResponse = JSON.parse(this.responseText);
        const questionUuid = jsonResponse.myNextQuestionUuid
        resolve(questionUuid)
      }
    };
    xhttp.open("GET", "/api/v1/ri", true);
    xhttp.send();
  })
}

// async function stopRecordingAndUploadAsync() {
// }

async function triggerNextQuesionAsync() {
  if (mediaRecorder != null) {
    mediaRecorder.stop();
  }

  const questionUuid = await getNextQuestionAsync();
  const question = await findQuestionByUuidAsync(questionUuid);
  document.getElementById('question_phrase').innerText = question.phrase;
  document.getElementById('question_uuid').value = question.uuid;
}

function updateRecordingVisuals() {
  console.log(`updateRecordingVisuals()`);
  if (gRecordingInProgress === true) {
    document.getElementById('recording-true').style.display = 'block';
    document.getElementById('recording-false').style.display = 'none';
  } else {
    document.getElementById('recording-true').style.display = 'none';
    document.getElementById('recording-false').style.display = 'block';
  }
}

// function requestAccessToMicrophone() {
//    console.log("requestAccessToMicrophone()");
  
  navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
          mediaRecorder = new MediaRecorder(stream);
          const audioChunks = [];

          // When data is available, store it in the audioChunks array
          mediaRecorder.ondataavailable = event => {
              audioChunks.push(event.data);
          };

          mediaRecorder.onstart = () => {
              console.log('Recording started');
              gRecordingInProgress = true;
              updateRecordingVisuals();
          };

          console.log('Preparing to start MediaRecorder...');
          // Start recording
          mediaRecorder.start();
          updateRecordingVisuals();

          // Stop recording after 5 seconds (or use a stop button)
          // setTimeout(() => {
          //     mediaRecorder.stop();
          // }, 2000);

          // When the recording stops, process and upload the data
          mediaRecorder.onstop = () => {
            gRecordingInProgress = false;
            updateRecordingVisuals();
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            const formData = new FormData();
            formData.append('audio', audioBlob, 'recording.webm');
            formData.append('question_uuid', document.getElementById('question_uuid').value);

            // Upload the audio file
            fetch('/answer/uploadMine', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Upload success:', data);
            })
            .catch(error => {
                console.error('Upload failed:', error);
            });
          };
      })
      .catch(error => {
          console.error('Microphone access denied:', error);
      })
//  }

window.addEventListener('load', async function () {
  await triggerNextQuesionAsync();
  // requestAccessToMicrophone();
})
</script>


<body>
  <div id="recording-true" style="display: none;">
    <h1><span style="color: red">Recording...</span></h1>
  </div>
  <div id="recording-false"  style="display: none;">
    <h1><span style="color: gray">Paused.</span></h1>
  </div>
  <h1 id="question_phrase"></h1>
  <form id="oneandonlyform" action="/answer/uploadMine" method="post" enctype="multipart/form-data">      
    <input type="file" name="file" id="file" style="display: none"/>
    <input type="hidden" id="question_uuid" name="question_uuid" required>
  </form>
  <button class="btn btn-primary" onclick="triggerNextQuesionAsync()">Next Question</button>
</body>


</html>